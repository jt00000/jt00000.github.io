<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-12-24T16:00:09+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">ただの記録</title><subtitle></subtitle><entry><title type="html">SECCON 2019 FINALS writeup</title><link href="http://localhost:4000/pwn/2019/12/24/post.html" rel="alternate" type="text/html" title="SECCON 2019 FINALS writeup" /><published>2019-12-24T09:00:00+09:00</published><updated>2019-12-24T09:00:00+09:00</updated><id>http://localhost:4000/pwn/2019/12/24/post</id><content type="html" xml:base="http://localhost:4000/pwn/2019/12/24/post.html">&lt;h1 id=&quot;seccon-2019-finals-writeup&quot;&gt;SECCON 2019 FINALS writeup&lt;/h1&gt;

&lt;p&gt;300点取ったはず。 
以下さわったやつだけ。今回はチーム内で一番やること多かったのにほとんど何もできてないので、主に反省。&lt;/p&gt;

&lt;h2 id=&quot;server1&quot;&gt;server1&lt;/h2&gt;
&lt;h3 id=&quot;問題概要&quot;&gt;問題概要&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;繋げるポートの計算式がきて、つなぐとトークンの入力を求められる。&lt;/li&gt;
  &lt;li&gt;その後１０ループで指定されたポートにudpでトークンを投げると、ディフェンスフラグ獲得。&lt;/li&gt;
  &lt;li&gt;ポートはsrand(0)で決まっているので確定的に動作する。&lt;/li&gt;
  &lt;li&gt;udp向けにはトークンが一致していないと返事を返さない（とても重要）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;作業履歴と反省&quot;&gt;作業履歴と反省&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;解析のためにローカルでもつながるようにバイナリをパッチした。アドレスチェック２箇所くらい潰した。&lt;/li&gt;
  &lt;li&gt;中身が単純なので何も考えずに文字パースして投げて待ってのスクリプトを作った。アタックフラグ入手。&lt;/li&gt;
  &lt;li&gt;トークンを”AAAA”とかにしてたのでチームのトークンに変えたら、返事が返ってこなくなった。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この現象についてはいまだ原因不明。
投げるときは以下のようなものを放り込んでましたが、果たして気づく日は来るか。ローカルだと正しそうに動作するんですが。&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# token 入手済み
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendlineafter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Token? '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvuntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;' is '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvuntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;PORT:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;UDP_IP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# &quot;10.1.1.1&quot;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;UDP_IP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'localhost'&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;UDP_PORT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MESSAGE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sending udp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SOCK_DGRAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# sock.bind((UDP_IP, UDP_PORT))
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UDP_IP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UDP_PORT&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MESSAGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UDP_IP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UDP_PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvfrom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# &amp;lt;-------------1ループ目のここで死ぬ
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;RECV:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x00&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;next PORT:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;UDP_PORT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;done&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;udpポートは指定ポート＋０〜１０００と分かっていたので全udpポートに投げるスクリプトを作ったが復帰しない。元のポートも何も言わない。詰んだ。無限に時間溶かした。&lt;/li&gt;
  &lt;li&gt;２日目もスクリプトのチェックして投げたけど同様に返事こなくなって、死。&lt;/li&gt;
  &lt;li&gt;ちなみにこのあとは接続１秒制限というのがあって、そこは並列に投げればいいらしいというところまでつづいてるらしい。この辺りはプログラミング力。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;復帰用のudp掃除は最初に投げたtokenじゃないとだめっていうの、パーティ時に聞いて納得。明らかに粘りが足りてない。&lt;/p&gt;

&lt;h2 id=&quot;server4&quot;&gt;server4&lt;/h2&gt;
&lt;h3 id=&quot;問題概要-1&quot;&gt;問題概要&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;intel pin問題。バイナリと条件分岐のトレース結果が与えられ、トレースに合う入力をサブミットする。全4問。&lt;/li&gt;
  &lt;li&gt;予選は何かがちゃってたら解けたやつ。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;作業履歴と反省-1&quot;&gt;作業履歴と反省&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;server1とqrのpwn問やりたかったので着手が遅れた。初日は全く見てなかった。&lt;/li&gt;
  &lt;li&gt;トレースの入力パースするところを分析して、分岐アドレスの下3桁を拾って、処理をなんとなく表示するスクリプトを作って、そこから入力をがちゃる作業をしてた。（intel pin？なにそれ？あのがんばって入れようとしても何か動かないやつ？）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;box1はこんな感じ。（原始人スクリプト）上手く行ったら次々自動化しようと考えた。流石にアドレス取るところは自動にしたが。&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xbb6&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'f'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xa31&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'t'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;add: v1 += 1&quot;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xbfe&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'f'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;b&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xc46&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'f'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;c&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;まじめに自動化しようと思ったのにbox2は全く違う。入力をがちゃられるので、それの分岐を揃えてねって感じ。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;解析すると、ほとんど分岐しない（決められた回数決められた処理をするだけ）ことが判明。&lt;/li&gt;
  &lt;li&gt;唯一の差は入力長に依存してループ回数が変わるところ(0xc61?)だけ。bp貼って眺めると、入力長が0x10増えるごとに1ループ増えることが分かったので、のぞみの回数ループする”AAAAAA（略）”を投げて終わり。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;box3はまさかのVM問！与えられた文字列を命令列として処理するタイプ。めちゃくちゃやりたかったけど残り3時間くらい。真面目にやってたら絶対時間が足りないので、callトレース→関数内トレースの順番で作業していくことに。本当は命令ごとの処理をある程度見たいところですが。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;traceファイルにはbox3からcallの分岐が現れて、callは1byteの文字*8でベースアドレスから加算して飛ぶので、関数テーブルを引きずり出して、使うやつだけ紙に書いた。&lt;/li&gt;
  &lt;li&gt;callの順番と回数が合うように入力を生成したところで時間切れ。フラグ取れず。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;途中ディフェンスポイントにもチャレンジしたが、5分未満くらいで解かれていたため、明らかに原始人には住処がないことを自覚し、より期待値の高いアタックフラグに専念した。これもプログラミング。また前提としてトレーサーのセットアップ。&lt;br /&gt;
強いひとの記事ではx86の命令が並んでたっぽくて、時間かけても気づかなかっただろうなという気持ち。あと2時間位あれば解けるは解けてたと思う&lt;/p&gt;

&lt;h2 id=&quot;server6-qr&quot;&gt;server6 QR&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;qrデコーダが与えられて、フラグが２つ。１つ目はお土産問題。２つ目は明らかにpwnだが、今日までwriteupを見たものはいない。（web解法除く）&lt;/li&gt;
  &lt;li&gt;pie+no canary+bofでどこ飛びますかっていう問題だったと思う。比較的早く非自明と判断でき、結果それは正解だった。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;server6-hardware&quot;&gt;server6 hardware&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;stm32 miniとst-link v2が与えられる問題。さして通信してみたがどのボタンを押しても”frozen due to securiy~~”みたいな文字しか出てこない。デバッカは認識しない。&lt;/li&gt;
  &lt;li&gt;ジャンパピンのヘッダが明らか後付だったのでなんかあるなと思って、適当に０と１のうち１の方に指したらデバッカが認識した。がuartの方は止まった。&lt;/li&gt;
  &lt;li&gt;ストレージ全部漁ったけどどう読んだらいいのか分からず。ghidraで読めるっぽいけど、アーキの選択どうすればいいのか。&lt;/li&gt;
  &lt;li&gt;gdbもつなげたけど、何も動作してないので何もないなと感じて終わり。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最後パーティで問題名の人にお話を伺ったところ、ジャンパはブートの種類の指定をしていて、デバッカ認識まで行ったらファーム抜いて解析して、gdbでチェック処理スキップしたら勝ちって言われた。&lt;br /&gt;
つまり、実はパスワード問(rev)だったこと、デバッカ繋いだときもデバイスは生きていたことを知らずにいたということ（戦犯）雰囲気でピン刺すな。&lt;/p&gt;

&lt;p&gt;鋭意復習中なんですが、今試してもUSB刺すと勝手に入力されちゃって、パスワードが入力できない。勝手にパスワード入れられるのも演出だと思っていた。&lt;br /&gt;
windowsだと行けた。バイナリも出力される文字列を含めたところは抜けたけど、どう着手していくもんなのかわからぬ。&lt;/p&gt;

&lt;h2 id=&quot;server6-badmouse&quot;&gt;server6 badmouse&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;マウスが動き出したのですばやくgimpを起動。予想通り、途中までフラグが書かれて遅くなる。&lt;/li&gt;
  &lt;li&gt;ファームはghidraで行けるらしいけどさっぱりわかりません。どのアーキ選択したらいいの？avr8bitなら何でもいいのかな？そもそもhexファイル直に放り込んでよかったのか？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;こちらも復習中。いろいろ記事見せてもらった感じ、作って試してっていう動きが必要だった。どの種類の問題も初見の対処力は無なので、これができないと勝つのは厳しいなと感じています。&lt;/p&gt;

&lt;h2 id=&quot;要するに来年勝つために&quot;&gt;要するに来年勝つために&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;server1より:udp復帰方法を粘って探して試せ。わからんときは運営に聞け。&lt;/li&gt;
  &lt;li&gt;server4より:intel pin入れろ話はそれから。&lt;/li&gt;
  &lt;li&gt;server6より:とりあえずghidraの使い方を学ぶ。バイナリdumpも多分間違ってるっぽいのでそこもちゃんと調べてやる。作業するときはある程度自信を持って(自分を騙して)やる。&lt;/li&gt;
  &lt;li&gt;全般:とりあえず競プロやるべき。問題を落ち着いて全部読むべき。ディフェンスポイントの取り方は特に読むべき。pwn出ると思うな。pwn探すな。なくてもがっかりするな。&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">SECCON 2019 FINALS writeup</summary></entry></feed>